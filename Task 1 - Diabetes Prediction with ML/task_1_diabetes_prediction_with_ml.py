# -*- coding: utf-8 -*-
"""Task 1 - Diabetes Prediction with ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yJJlhfruvAKZDpQCfNoGhYwSQF6lIhb3

## **Diabetes Prediction with ML**

Importing the Dependencies
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt

"""Loading the dataset"""

data = pd.read_csv("diabetes.csv")

"""Defining features (X) and the target variable (y)"""

X = data.drop("Outcome", axis=1)
y = data["Outcome"]

"""Spliting the data into training set and test set"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Creating a Logistic Regression model"""

model = LogisticRegression(max_iter=10000)

"""Training the model on the training data"""

model.fit(X_train, y_train)

"""Making predictions on the test data"""

y_pred = model.predict(X_test)

"""Evaluating the model and printing the results"""

accuracy = round((y_pred == y_test).mean() * 100, 2)
num_diabetic = sum(y_test == 1)
num_non_diabetic = sum(y_test == 0)
num_correct_predictions = sum(y_pred == y_test)
sensitivity = round((num_correct_predictions / num_diabetic) * 100, 2)
specificity = round((num_correct_predictions / num_non_diabetic) * 100, 2)

print(f"Accuracy: {accuracy}%")
print(f"Sensitivity (True Positive Rate): {sensitivity}%")
print(f"Specificity (True Negative Rate): {specificity}%")

"""Taking input of new data and making prediction"""

new_data = []

print("\nEnter the following information for the new data:")
new_data.append(float(input("Pregnancies: ")))
new_data.append(float(input("Glucose: ")))
new_data.append(float(input("BloodPressure: ")))
new_data.append(float(input("SkinThickness: ")))
new_data.append(float(input("Insulin: ")))
new_data.append(float(input("BMI: ")))
new_data.append(float(input("DiabetesPedigreeFunction: ")))
new_data.append(float(input("Age: ")))

new_data = [new_data]
new_prediction = model.predict(new_data)

if new_prediction[0] == 1:
    print("\nThe person is predicted to be diabetic.")
else:
    print("\nThe person is predicted to be not diabetic.")